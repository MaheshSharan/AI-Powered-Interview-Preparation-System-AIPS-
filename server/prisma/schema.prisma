// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  resume         Resume?
  jobs           Job[]
  assessments    Assessment[]
  interviews     Interview[]
  progressStatus ProgressStatus?
}

model Resume {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  filePath      String
  fileName      String
  fileType      String
  uploadedAt    DateTime @default(now())
  analyzedAt    DateTime?
  skills        Skill[]
  score         Float?
  feedback      String?
  lastUpdatedAt DateTime @updatedAt
}

model Skill {
  id        String   @id @default(uuid())
  name      String
  category  String
  level     Int      // 1-5 scale
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  jobs      Job[]    @relation("JobSkills")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id          String   @id @default(uuid())
  title       String
  company     String?
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills      Skill[]  @relation("JobSkills")
  matchScore  Float?
  selected    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Assessment {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId   String
  problem     Problem  @relation(fields: [problemId], references: [id])
  code        String
  language    String
  passed      Boolean
  score       Float?
  feedback    String?
  timeSpent   Int      // in seconds
  completedAt DateTime @default(now())
}

model Problem {
  id           String       @id @default(uuid())
  title        String
  description  String
  difficulty   String       // easy, medium, hard
  category     String
  testCases    TestCase[]
  assessments  Assessment[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model TestCase {
  id        String   @id @default(uuid())
  problemId String
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  input     String
  output    String
  isHidden  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Interview {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recordingUrl String?
  questions    Question[]
  feedback     String?
  confidenceScore Float?
  technicalScore  Float?
  communicationScore Float?
  completedAt  DateTime @default(now())
}

model Question {
  id          String    @id @default(uuid())
  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  text        String
  category    String    // technical, behavioral, etc.
  response    String?
  feedback    String?
  score       Float?
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProgressStatus {
  id                    String   @id @default(uuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeUploaded        Boolean  @default(false)
  resumeAnalyzed        Boolean  @default(false)
  jobSelected           Boolean  @default(false)
  technicalAssessmentCompleted Boolean @default(false)
  interviewCompleted    Boolean  @default(false)
  lastActivity          DateTime @default(now())
  updatedAt             DateTime @updatedAt
}